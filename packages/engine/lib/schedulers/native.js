// Generated by CoffeeScript 2.5.1
var utils;

utils = require('../utils');

module.exports = function() {
  var promise, running, scheduler, stack;
  stack = [];
  running = false;
  scheduler = null;
  promise = new Promise(function(fresolve, freject) {
    return scheduler = {
      pump: function() {
        var handler, reject, resolve;
        if (running) {
          return;
        }
        if (!stack.length) {
          return fresolve();
        }
        running = true;
        [handler, resolve, reject] = stack.shift();
        return setImmediate(function() {
          var res;
          res = handler.call();
          if (res != null ? res.then : void 0) {
            return res.then(function() {
              running = false;
              resolve.apply(null, arguments);
              return setImmediate(function() {
                return scheduler.pump();
              });
            }, function() {
              running = false;
              reject.apply(null, arguments);
              return setImmediate(function() {
                return scheduler.pump();
              });
            });
          } else if (Array.isArray(res)) {
            running = false;
            return scheduler.unshift(res).then(resolve, reject);
          } else if (res) {
            throw Error(`Invalid state ${JSON.stringify(res)}`);
          }
        });
      },
      unshift: function(handlers, {pump = true} = {}) {
        var isArray;
        isArray = Array.isArray(handlers);
        if (!(isArray || typeof handlers === 'function')) {
          throw Error('Invalid Argument');
        }
        return new Promise(function(resolve, reject) {
          var handler;
          if (!isArray) {
            stack.unshift([handlers, resolve, reject]);
            if (pump) {
              return scheduler.pump();
            }
          } else {
            // Unshift from the last to the first element to preservce order
            Promise.all(((function() {
              var i, len, ref, results;
              ref = handlers.reverse();
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                handler = ref[i];
                results.push(scheduler.unshift(handler, {
                  pump: false
                }));
              }
              return results;
            })()).reverse()).then(resolve, reject);
            if (pump) {
              return scheduler.pump();
            }
          }
        });
      },
      push: function(handlers) {
        var isArray;
        isArray = Array.isArray(handlers);
        if (!(isArray || typeof handlers === 'function')) {
          throw Error('Invalid Argument');
        }
        return new Promise(function(resolve, reject) {
          var handler;
          if (!isArray) {
            stack.push([handlers, resolve, reject]);
            return scheduler.pump();
          } else {
            return Promise.all((function() {
              var i, len, results;
              results = [];
              for (i = 0, len = handlers.length; i < len; i++) {
                handler = handlers[i];
                results.push(scheduler.push(handler));
              }
              return results;
            })()).then(resolve, reject);
          }
        });
      }
    };
  });
  return new Proxy(promise, {
    get: function(target, name) {
      if (target[name] != null) {
        if (typeof target[name] === 'function') {
          return target[name].bind(target);
        } else {
          return target[name];
        }
      } else {
        return scheduler[name];
      }
    }
  });
};
